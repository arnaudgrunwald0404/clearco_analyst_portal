// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Newsletter subscriptions
  newsletters Newsletter[]
  // Calendar connections
  calendarConnections CalendarConnection[]
}

model Analyst {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  company     String?
  title       String?
  phone       String?
  linkedIn    String?
  twitter     String?
  website     String?
  bio         String?
  profileImageUrl String?
  
  // New fields
  type        AnalystType @default(Analyst)
  eligibleNewsletters String?     // JSON array of newsletter IDs this analyst is eligible to receive
  
  // Enhanced fields for advanced features
  influenceScore    Int       @default(50) // 0-100 scale
  lastContactDate   DateTime?
  nextContactDate   DateTime?
  communicationCadence Int?    // Days between contacts
  relationshipHealth RelationshipHealth @default(GOOD)
  
  // AI/Social intelligence
  recentSocialSummary String?
  socialSummaryUpdatedAt DateTime?
  keyThemes       String? // JSON array of themes
  
  // Research tracking
  upcomingPublications String? // JSON array
  recentPublications   String? // JSON array
  speakingEngagements  String? // JSON array
  awards              String? // JSON array
  
  coveredTopics AnalystCoveredTopic[]
  influence   Influence @default(MEDIUM)
  status      Status    @default(ACTIVE)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  interactions Interaction[]
  newsletters  NewsletterSubscription[]
  loginAccess  AnalystAccess?
  publications Publication[]
  socialPosts  SocialPost[]
  briefingAnalysts BriefingAnalyst[]
  alerts       Alert[]
  conversationSummaries ConversationSummary[]
  portalSessions AnalystPortalSession[]
  testimonials Testimonial[]
  calendarMeetings CalendarMeeting[]
}

model Newsletter {
  id          String   @id @default(cuid())
  title       String
  subject     String
  content     String
  htmlContent String?
  status      NewsletterStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  
  // Relations
  creator     User     @relation(fields: [createdBy], references: [id])
  subscriptions NewsletterSubscription[]
}

model NewsletterSubscription {
  id           String    @id @default(cuid())
  analystId    String
  newsletterId String
  sentAt       DateTime?
  opened       Boolean   @default(false)
  clicked      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  
  // Relations
  analyst      Analyst   @relation(fields: [analystId], references: [id], onDelete: Cascade)
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  
  @@unique([analystId, newsletterId])
}

model Interaction {
  id          String      @id @default(cuid())
  analystId   String
  type        InteractionType
  subject     String
  description String?
  date        DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  analyst     Analyst     @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model AnalystCoveredTopic {
  id        String   @id @default(cuid())
  analystId String
  topic     String

  // Relations
  analyst   Analyst  @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model AnalystAccess {
  id        String   @id @default(cuid())
  analystId String   @unique
  password  String
  lastLogin DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  analyst   Analyst  @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model Content {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        ContentType
  url         String?
  filePath    String?
  isExclusive Boolean     @default(false)
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum Role {
  ADMIN
  EDITOR
}

enum Influence {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum Status {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum NewsletterStatus {
  DRAFT
  SCHEDULED
  SENT
  CANCELLED
}

enum InteractionType {
  EMAIL
  CALL
  MEETING
  DEMO
  EVENT
  OTHER
}

enum ContentType {
  ARTICLE
  WHITEPAPER
  DEMO
  VIDEO
  WEBINAR
  REPORT
  OTHER
}

enum AnalystType {
  Analyst
  Press
  Investor
  Practitioner
  Influencer
}

enum RelationshipHealth {
  EXCELLENT
  GOOD
  FAIR
  POOR
  CRITICAL
}

enum PublicationType {
  RESEARCH_REPORT
  BLOG_POST
  WHITEPAPER
  WEBINAR
  PODCAST
  ARTICLE
  OTHER
}

enum AlertType {
  COMMUNICATION_OVERDUE
  BRIEFING_DUE
  RELATIONSHIP_HEALTH
  SOCIAL_MENTION
  PUBLICATION_ALERT
  ENGAGEMENT_OPPORTUNITY
}

enum BriefingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum SocialPlatform {
  TWITTER
  LINKEDIN
  MEDIUM
  BLOG
  OTHER
}

// New models for enhanced features
model Publication {
  id          String          @id @default(cuid())
  analystId   String
  title       String
  url         String?
  summary     String?
  type        PublicationType
  publishedAt DateTime
  isTracked   Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  // Relations
  analyst     Analyst         @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model SocialPost {
  id          String        @id @default(cuid())
  analystId   String
  platform    SocialPlatform
  content     String
  url         String?
  engagements Int           @default(0)
  postedAt    DateTime
  isRelevant  Boolean       @default(true)
  sentiment   String?       // POSITIVE, NEGATIVE, NEUTRAL
  themes      String?       // JSON array of extracted themes
  createdAt   DateTime      @default(now())
  
  // Relations
  analyst     Analyst       @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model Briefing {
  id          String        @id @default(cuid())
  title       String
  description String?
  scheduledAt DateTime
  completedAt DateTime?
  status      BriefingStatus @default(SCHEDULED)
  agenda      String?       // JSON array of agenda items
  notes       String?
  outcomes    String?       // JSON array of outcomes
  followUpActions String?    // JSON array of follow-up actions
  recordingUrl String?
  transcript  String?       // Full transcript text
  transcriptFile String?    // Path to transcript file if uploaded
  aiSummary   String?       // AI-generated summary
  followUpSummary String?   // AI-generated follow-up actions
  gongMeetingId String?     // Gong meeting ID for API integration
  calendarMeetingId String? // Link to calendar meeting
  attendeeEmails String?    // JSON array of attendee emails
  duration    Int?          // Meeting duration in minutes
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  analysts    BriefingAnalyst[]
  actionItems ActionItem[]
  calendarMeeting CalendarMeeting? @relation(fields: [calendarMeetingId], references: [id])
}

model Alert {
  id          String    @id @default(cuid())
  analystId   String
  type        AlertType
  title       String
  message     String
  isRead      Boolean   @default(false)
  actionTaken Boolean   @default(false)
  priority    String    @default("MEDIUM") // HIGH, MEDIUM, LOW
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  
  // Relations
  analyst     Analyst   @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model ConversationSummary {
  id          String    @id @default(cuid())
  analystId   String
  title       String
  summary     String
  keyPoints   String?   // JSON array
  actionItems String?   // JSON array
  recordingUrl String?
  transcriptUrl String?
  date        DateTime
  duration    Int?      // in minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  analyst     Analyst   @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model AnalystPortalSession {
  id          String    @id @default(cuid())
  analystId   String
  sessionId   String    @unique
  loginAt     DateTime  @default(now())
  logoutAt    DateTime?
  ipAddress   String?
  userAgent   String?
  
  // Relations
  analyst     Analyst   @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model CompanyVision {
  id          String    @id @default(cuid())
  title       String
  content     String
  type        String    // MISSION, VALUES, STRATEGY, ROADMAP
  isPublished Boolean   @default(false)
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ExclusiveContent {
  id          String    @id @default(cuid())
  title       String
  description String?
  content     String
  type        ContentType
  targetAudience String? // JSON array of analyst IDs or expertise areas
  accessLevel String    @default("ALL") // ALL, TIER1, TIER2, SPECIFIC
  downloadUrl String?
  viewCount   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Testimonial {
  id          String    @id @default(cuid())
  analystId   String
  quote       String
  context     String?   // Context about when/where the quote was made
  isPublished Boolean   @default(false)
  displayOrder Int      @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  analyst     Analyst   @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model CalendarConnection {
  id              String    @id @default(cuid())
  userId          String
  title           String    // Display name like "Chief Product Officer"
  email           String    // Connected Google account email
  googleAccountId String    // Google account ID
  accessToken     String    // Encrypted access token
  refreshToken    String?   // Encrypted refresh token
  tokenExpiry     DateTime? // When the access token expires
  isActive        Boolean   @default(true)
  lastSyncAt      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  meetings        CalendarMeeting[]
  
  @@unique([userId, googleAccountId])
}

model CalendarMeeting {
  id                  String             @id @default(cuid())
  calendarConnectionId String
  googleEventId       String
  title               String
  description         String?
  startTime           DateTime
  endTime             DateTime
  attendees           String?            // JSON array of attendee emails
  analystId           String?            // If identified as analyst meeting
  isAnalystMeeting    Boolean            @default(false)
  confidence          Float?             // AI confidence score for analyst identification
  tags                String?            // JSON array of tags
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  
  // Relations
  calendarConnection  CalendarConnection @relation(fields: [calendarConnectionId], references: [id], onDelete: Cascade)
  analyst             Analyst?           @relation(fields: [analystId], references: [id])
  briefings           Briefing[]
  
  @@unique([calendarConnectionId, googleEventId])
}

// Junction table for many-to-many relationship between briefings and analysts
model BriefingAnalyst {
  id         String   @id @default(cuid())
  briefingId String
  analystId  String
  role       String?  // PRIMARY, SECONDARY, OBSERVER
  createdAt  DateTime @default(now())
  
  // Relations
  briefing   Briefing @relation(fields: [briefingId], references: [id], onDelete: Cascade)
  analyst    Analyst  @relation(fields: [analystId], references: [id], onDelete: Cascade)
  
  @@unique([briefingId, analystId])
}

// Gong integration configuration
model GongConfig {
  id          String    @id @default(cuid())
  apiKey      String    // Encrypted Gong API key
  subdomain   String    // Gong subdomain
  isActive    Boolean   @default(false)
  lastSyncAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Action items from briefings
model ActionItem {
  id          String    @id @default(cuid())
  briefingId  String
  description String
  assignedTo  String?   // Who is responsible (internal team member)
  assignedBy  String?   // Who assigned it (usually internal)
  dueDate     DateTime?
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  completedBy String?   // Name of person who marked it complete
  priority    String    @default("MEDIUM") // HIGH, MEDIUM, LOW
  category    String?   // Type of action: FOLLOW_UP, SEND_DOCUMENT, SCHEDULE_MEETING, etc.
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  briefing    Briefing  @relation(fields: [briefingId], references: [id], onDelete: Cascade)
}
