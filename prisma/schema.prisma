generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String?
  password            String
  role                Role                 @default(ADMIN)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  calendarConnections CalendarConnection[]
  newsletters         Newsletter[]
}

model Analyst {
  id                     String                   @id @default(cuid())
  firstName              String
  lastName               String
  email                  String                   @unique
  company                String?
  title                  String?
  phone                  String?
  linkedIn               String?
  twitter                String?
  website                String?
  bio                    String?
  profileImageUrl        String?
  type                   AnalystType              @default(Analyst)
  eligibleNewsletters    String?
  influenceScore         Int                      @default(50)
  lastContactDate        DateTime?
  nextContactDate        DateTime?
  communicationCadence   Int?
  relationshipHealth     RelationshipHealth       @default(GOOD)
  recentSocialSummary    String?
  socialSummaryUpdatedAt DateTime?
  keyThemes              String?
  upcomingPublications   String?
  recentPublications     String?
  speakingEngagements    String?
  awards                 String?
  influence              Influence                @default(MEDIUM)
  status                 Status                   @default(ACTIVE)
  notes                  String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  alerts                 Alert[]
  loginAccess            AnalystAccess?
  coveredTopics          AnalystCoveredTopic[]
  portalSessions         AnalystPortalSession[]
  briefingAnalysts       BriefingAnalyst[]
  calendarMeetings       CalendarMeeting[]
  conversationSummaries  ConversationSummary[]
  interactions           Interaction[]
  newsletters            NewsletterSubscription[]
  publications           Publication[]
  socialHandles          SocialHandle[]
  socialPosts            SocialPost[]
  testimonials           Testimonial[]
}

model Newsletter {
  id            String                   @id @default(cuid())
  title         String
  subject       String
  content       String
  htmlContent   String?
  status        NewsletterStatus         @default(DRAFT)
  scheduledAt   DateTime?
  sentAt        DateTime?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  createdBy     String
  creator       User                     @relation(fields: [createdBy], references: [id])
  subscriptions NewsletterSubscription[]
}

model NewsletterSubscription {
  id           String     @id @default(cuid())
  analystId    String
  newsletterId String
  sentAt       DateTime?
  opened       Boolean    @default(false)
  clicked      Boolean    @default(false)
  createdAt    DateTime   @default(now())
  analyst      Analyst    @relation(fields: [analystId], references: [id], onDelete: Cascade)
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)

  @@unique([analystId, newsletterId])
}

model Interaction {
  id          String          @id @default(cuid())
  analystId   String
  type        InteractionType
  subject     String
  description String?
  date        DateTime
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  analyst     Analyst         @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model AnalystCoveredTopic {
  id        String  @id @default(cuid())
  analystId String
  topic     String
  analyst   Analyst @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model AnalystAccess {
  id        String    @id @default(cuid())
  analystId String    @unique
  password  String
  lastLogin DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  analyst   Analyst   @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model Content {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        ContentType
  url         String?
  filePath    String?
  isExclusive Boolean     @default(false)
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Publication {
  id          String          @id @default(cuid())
  analystId   String
  title       String
  url         String?
  summary     String?
  type        PublicationType
  publishedAt DateTime
  isTracked   Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  analyst     Analyst         @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model SocialHandle {
  id            String         @id @default(cuid())
  analystId     String
  platform      SocialPlatform
  handle        String
  displayName   String?
  isActive      Boolean        @default(true)
  lastCrawledAt DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  analyst       Analyst        @relation(fields: [analystId], references: [id], onDelete: Cascade)

  @@unique([analystId, platform, handle])
}

model SocialPost {
  id          String         @id @default(cuid())
  analystId   String
  platform    SocialPlatform
  content     String
  url         String?
  engagements Int            @default(0)
  postedAt    DateTime
  isRelevant  Boolean        @default(true)
  sentiment   String?
  themes      String?
  createdAt   DateTime       @default(now())
  analyst     Analyst        @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model Briefing {
  id                String            @id @default(cuid())
  title             String
  description       String?
  scheduledAt       DateTime
  completedAt       DateTime?
  status            BriefingStatus    @default(SCHEDULED)
  agenda            String?
  notes             String?
  outcomes          String?
  followUpActions   String?
  recordingUrl      String?
  transcript        String?
  transcriptFile    String?
  aiSummary         String?
  followUpSummary   String?
  gongMeetingId     String?
  calendarMeetingId String?
  attendeeEmails    String?
  duration          Int?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  actionItems       ActionItem[]
  calendarMeeting   CalendarMeeting?  @relation(fields: [calendarMeetingId], references: [id])
  analysts          BriefingAnalyst[]
}

model Alert {
  id          String    @id @default(cuid())
  analystId   String
  type        AlertType
  title       String
  message     String
  isRead      Boolean   @default(false)
  actionTaken Boolean   @default(false)
  priority    String    @default("MEDIUM")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  analyst     Analyst   @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model ConversationSummary {
  id            String   @id @default(cuid())
  analystId     String
  title         String
  summary       String
  keyPoints     String?
  actionItems   String?
  recordingUrl  String?
  transcriptUrl String?
  date          DateTime
  duration      Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  analyst       Analyst  @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model AnalystPortalSession {
  id        String    @id @default(cuid())
  analystId String
  sessionId String    @unique
  loginAt   DateTime  @default(now())
  logoutAt  DateTime?
  ipAddress String?
  userAgent String?
  analyst   Analyst   @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model CompanyVision {
  id          String   @id @default(cuid())
  title       String
  content     String
  type        String
  isPublished Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExclusiveContent {
  id             String      @id @default(cuid())
  title          String
  description    String?
  content        String
  type           ContentType
  targetAudience String?
  accessLevel    String      @default("ALL")
  downloadUrl    String?
  viewCount      Int         @default(0)
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Testimonial {
  id           String   @id @default(cuid())
  analystId    String
  quote        String
  context      String?
  isPublished  Boolean  @default(false)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  analyst      Analyst  @relation(fields: [analystId], references: [id], onDelete: Cascade)
}

model CalendarConnection {
  id              String            @id @default(cuid())
  userId          String
  title           String
  email           String
  googleAccountId String
  accessToken     String
  refreshToken    String?
  tokenExpiry     DateTime?
  isActive        Boolean           @default(true)
  lastSyncAt      DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  meetings        CalendarMeeting[]

  @@unique([userId, googleAccountId])
}

model CalendarMeeting {
  id                   String             @id @default(cuid())
  calendarConnectionId String
  googleEventId        String
  title                String
  description          String?
  startTime            DateTime
  endTime              DateTime
  attendees            String?
  analystId            String?
  isAnalystMeeting     Boolean            @default(false)
  confidence           Float?
  tags                 String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  briefings            Briefing[]
  analyst              Analyst?           @relation(fields: [analystId], references: [id])
  calendarConnection   CalendarConnection @relation(fields: [calendarConnectionId], references: [id], onDelete: Cascade)

  @@unique([calendarConnectionId, googleEventId])
}

model BriefingAnalyst {
  id         String   @id @default(cuid())
  briefingId String
  analystId  String
  role       String?
  createdAt  DateTime @default(now())
  analyst    Analyst  @relation(fields: [analystId], references: [id], onDelete: Cascade)
  briefing   Briefing @relation(fields: [briefingId], references: [id], onDelete: Cascade)

  @@unique([briefingId, analystId])
}

model GongConfig {
  id         String    @id @default(cuid())
  apiKey     String
  subdomain  String
  isActive   Boolean   @default(false)
  lastSyncAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ActionItem {
  id          String    @id @default(cuid())
  briefingId  String
  description String
  assignedTo  String?
  assignedBy  String?
  dueDate     DateTime?
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  completedBy String?
  priority    String    @default("MEDIUM")
  category    String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  briefing    Briefing  @relation(fields: [briefingId], references: [id], onDelete: Cascade)
}

model GeneralSettings {
  id              String   @id @default(cuid())
  companyName     String   @default("")
  protectedDomain String   @default("")
  logoUrl         String   @default("")
  industryName    String   @default("HR Technology")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("general_settings")
}

model AnalystPortalSettings {
  id                String   @id @default(cuid())
  welcomeQuote      String   @default("")
  quoteAuthor       String   @default("")
  authorImageUrl    String   @default("")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("analyst_portal_settings")
}

model PredefinedTopic {
  id          String        @id @default(cuid())
  name        String        @unique
  category    TopicCategory
  description String?
  order       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Award {
  id                String   @id @default(cuid())
  awardName         String
  publicationDate   DateTime
  processStartDate  DateTime
  contactInfo       String
  priority          AwardPriority @default(MEDIUM)
  topics            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum Role {
  ADMIN
  EDITOR
}

enum Influence {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum Status {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum NewsletterStatus {
  DRAFT
  SCHEDULED
  SENT
  CANCELLED
}

enum InteractionType {
  EMAIL
  CALL
  MEETING
  DEMO
  EVENT
  OTHER
}

enum ContentType {
  ARTICLE
  WHITEPAPER
  DEMO
  VIDEO
  WEBINAR
  REPORT
  OTHER
}

enum AnalystType {
  Analyst
  Press
  Investor
  Practitioner
  Influencer
}

enum RelationshipHealth {
  EXCELLENT
  GOOD
  FAIR
  POOR
  CRITICAL
}

enum PublicationType {
  RESEARCH_REPORT
  BLOG_POST
  WHITEPAPER
  WEBINAR
  PODCAST
  ARTICLE
  OTHER
}

enum AlertType {
  COMMUNICATION_OVERDUE
  BRIEFING_DUE
  RELATIONSHIP_HEALTH
  SOCIAL_MENTION
  PUBLICATION_ALERT
  ENGAGEMENT_OPPORTUNITY
}

enum BriefingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum SocialPlatform {
  TWITTER
  LINKEDIN
  MEDIUM
  BLOG
  OTHER
}

enum TopicCategory {
  CORE
  ADDITIONAL
}

enum AwardPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
